<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[API收集]]></title>
      <url>http://yoursite.com/2016/08/09/API%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>收集一些开发中可能用到的API</p>
</blockquote>
<ul>
<li><a href="http://apistore.baidu.com/astore/classificationservicelist.html?isFree=1" target="_blank" rel="external">百度API市场</a> 包含很多常见的API</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android系统控件一些很有用的属性]]></title>
      <url>http://yoursite.com/2016/08/09/Android%E7%B3%BB%E7%BB%9F%E6%8E%A7%E4%BB%B6%E4%B8%80%E4%BA%9B%E5%BE%88%E6%9C%89%E7%94%A8%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>总结一些系统控件中不常见，但是特别有用的属性。</p>
</blockquote>
<a id="more"></a>
<h1 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h1><ul>
<li><p>xml 中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android:textIsSelectable=&quot;true&quot;   设置可被选择，复制</span><br><span class="line">android:autoLink=&quot;web|phone|email&quot;  自动识别 链接/电话号码/email(此时被识别的部分带有下划线, 部分手机没有，如MX5)</span><br><span class="line">android:includeFontPadding=“false” 取消顶部底部间距</span><br><span class="line">android:maxEms 设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项。</span><br><span class="line">android:minEms 设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项。</span><br><span class="line">android:maxLength 限制显示的文本长度，超出部分不显示。</span><br><span class="line">android:lines 设置文本的行数，设置两行就显示两行，即使第二行没有数据。</span><br><span class="line">android:maxLines 设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示。</span><br><span class="line">android:minLines 设置文本的最小行数，与lines类似。</span><br><span class="line">android:lineSpacingExtra 设置行间距。</span><br></pre></td></tr></table></figure>
</li>
<li><p>java中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTextSize(int unit, int size)  指定单位</span><br><span class="line">TypedValue.COMPLEX_UNIT_PX : Pixels</span><br><span class="line">TypedValue.COMPLEX_UNIT_SP : Scaled Pixels</span><br><span class="line">TypedValue.COMPLEX_UNIT_DIP : Device Independent Pixels</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>(Textview超链接实现方式总结)[<a href="http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2016/01/29/TextView%E8%B6%85%E9%93%BE%E6%8E%A5%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93" target="_blank" rel="external">http://souly.cn/%E6%8A%80%E6%9C%AF%E5%8D%9A%E6%96%87/2016/01/29/TextView%E8%B6%85%E9%93%BE%E6%8E%A5%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93</a>] 写的不错，但也不好。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发缓存文件，下载文件]]></title>
      <url>http://yoursite.com/2016/08/08/Android%E5%BC%80%E5%8F%91%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>开发中缓存，下载是避免不了的，优秀，负责的码农一定会统一设置缓存，下载路径，便于管理，例如清除缓存。Android手机里面，缓存的位置分为两类，一类是Internal Storage，即内部存储，另外一类是External Storage，即外部存储。比较老的手机，有一个手机内部存储，还有一个SD卡存储，就是分别对应这两种存储位置，因为以前的SD卡是可以扩展的，即可拆卸的，所以可以用是否可拆卸作为内外存储的分类标准。</p>
</blockquote>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在Android手机里面，缓存的位置分为两类，一类是Internal Storage，即内部存储，另外一类是External Storage，即外部存储。</p>
<p>比较老的手机，有一个手机内部存储，还有一个SD卡存储，就是分别对应这两种存储位置，因为以前的SD卡是可以扩展的，即可拆卸的，所以可以用是否可拆卸作为内外存储的分类标准。</p>
<p>但是现在最新的设备，比如小米、锤子、华为等，都取消了可拆卸的SD卡，直接与机身焊接在一起，分为16G、32G版本，所以现在内外存储的分类不再以是否可拆卸作为标准，而是以下面的几方面作为新的标准：</p>
<p><strong>内部存储</strong></p>
<ul>
<li>总是可用的</li>
<li>这里的文件默认是只能被你的app所访问的。</li>
<li>当用户卸载你的app的时候，系统会把internal里面的相关文件都清除干净。</li>
<li>Internal是在你想确保不被用户与其他app所访问的最佳存储区域。</li>
</ul>
<p><strong>外部存储</strong></p>
<ul>
<li>并不总是可用的，因为用户可以选择把这部分作为USB存储模式，这样就不可以访问了。</li>
<li>是大家都可以访问的，因此保存到这里的文件是失去访问控制权限的。</li>
<li>当用户卸载你的app时，系统仅仅会删除external根目录（getExternalFilesDir()）下的相关文件。</li>
<li>External是在你不需要严格的访问权限并且你希望这些文件能够被其他app所共享或者是允许用户通过电脑访问时的最佳存储区域。</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><table>
<thead>
<tr>
<th>名称</th>
<th>来自</th>
<th>内部外部存储</th>
<th>路径</th>
<th>私有</th>
<th>自动删除</th>
<th>清除缓存</th>
<th>用户卸载</th>
</tr>
</thead>
<tbody>
<tr>
<td>getFileDir</td>
<td>Context</td>
<td>内部存储</td>
<td>/data/data/pacgage_name/files</td>
<td>√</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>getCacheDir</td>
<td>-</td>
<td>内部存储</td>
<td>/data/data/package_name/cache</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>getExternalFilesDir</td>
<td>-</td>
<td>外部存储</td>
<td>/sdcard/Android/date/package_name/files</td>
<td>√</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>getExternalCacheDir</td>
<td>-</td>
<td>外部存储</td>
<td>/sdcard/Android/date/package_name/cache</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>getExternalStorageDirectory</td>
<td>Environment</td>
<td>外部存储</td>
<td>SD卡根路径</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>getExternalStoragePublicDirectory</td>
<td>Environment</td>
<td>外部存储</td>
<td>SD卡根路径+(指定位置)</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody>
</table>
<blockquote>
<p>清除数据、清除缓存，卸载的区别</p>
<ul>
<li>清除数据主要是清除用户配置，比如SharedPreferences、数据库等等，这些数据都是在程序运行过程中保存的用户配置信息，清除数据后，下次进入程序就和第一次进入程序时一样</li>
<li>缓存是程序运行时的临时存储空间，它可以存放从网络下载的临时图片，从用户的角度出发清除缓存对用户并没有太大的影响，但是清除缓存后用户再次使用该APP时，由于本地缓存已经被清理，所有的数据需要重新从网络上获取。为了在清除缓存的时候能够正常清除与应用相关的缓存，请将缓存文件存放在getCacheDir()或者 getExternalCacheDir()路径下。</li>
<li>当你的应用在被用户卸载后，SDCard/Android/data/你的应用的包名/ 这个目录下的所有文件都会被删除，不会留下垃圾信息</li>
</ul>
</blockquote>
<p>感谢 <a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1208/3759.html" target="_blank" rel="external">缓存文件可以放在哪里？它们各自的特点是什么？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android开发一些不错的资料]]></title>
      <url>http://yoursite.com/2016/08/08/Android%E5%BC%80%E5%8F%91%E4%B8%80%E4%BA%9B%E4%B8%8D%E9%94%99%E7%9A%84%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近查资料发现了很多不错的网站，习惯性的放在浏览器的书签中，可是慢慢当收集的较多时，想对每个网站做点介绍方便以后查看，杯具了。。。。所以还是建个页面吧，也方便分享。</p>
</blockquote>
<a id="more"></a>
<h1 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h1><h2 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h2><ul>
<li><a href="http://mrfu.me/2016/02/27/Glide_Getting_Started/" target="_blank" rel="external">Glide大全</a> 这几乎搜集了关于Glide的所有用法，而且目录特别清晰。</li>
<li><a href="http://www.jianshu.com/p/96cb9272c843/comments/2466097" target="_blank" rel="external">Glide使用记录与疑惑</a> 补充个<strong>自定义缓存目录</strong></li>
<li><a href="https://muzhi1991.gitbooks.io/android-glide-wiki/content/index.html" target="_blank" rel="external">Glide3.x 官方wiki文档</a> 也不错</li>
</ul>
<h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><ul>
<li><a href="https://github.com/Curzibn/Luban" target="_blank" rel="external">Luban</a>可能是最接近微信朋友圈的图片压缩算法</li>
</ul>
<h2 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h2><p>其实我在使用EventBus之前一直有个困惑，如果同一个事件被多个组件注册岂不是同时都被收到，感觉很乱，使用一段后慢慢发现，其实不必担心。<br>不适合使用EventBus替代自定义控件时回调监听，第一，有可能根本不能用。第二，有可能在同一个Activity被使用过次，且处理方式不同。</p>
<ul>
<li><a href="http://blog.csdn.net/harvic880925/article/details/40660137" target="_blank" rel="external">EventBus使用详解</a> 总共有三篇，写的很清晰。</li>
</ul>
<h2 id="Volley"><a href="#Volley" class="headerlink" title="Volley"></a>Volley</h2><p>非常适合去进行数据量不大，但通信频繁的网络操作，而对于大数据量的网络操作，比如说下载文件等，Volley的表现就会非常糟糕。</p>
<ul>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/17482095" target="_blank" rel="external">Android Volley完全解析</a> 总共四篇（主要是第一篇，第三篇，图片加载用glide）</li>
<li><a href="http://bxbxbai.github.io/2014/09/14/android-working-with-volley/" target="_blank" rel="external">Android库Volley的使用介绍</a> 也不错</li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0720/3209.html" target="_blank" rel="external">OkHttp, Volley以及Gson</a> 推荐使用（+Glide）</li>
</ul>
<h2 id="Retrofit-RxJava"><a href="#Retrofit-RxJava" class="headerlink" title="Retrofit + RxJava"></a>Retrofit + RxJava</h2><p>Retrofit是用来简化APP访问服务器API，如果你的服务器使用的使RESTAPI，那么赶紧使用Retrofit吧。<br>RxJava的本质可以压缩为异步这一个词。说到根上，它就是一个实现异步操作的库，而别的定语都是基于这之上的。<br>两者一定要结合使用。</p>
<ul>
<li><a href="http://www.devwiki.net/2016/03/02/Retrofit-Use-Course-1/" target="_blank" rel="external">Retrofit使用教程(一)</a> 挺不错的，简单易懂(共三篇)</li>
<li><a href="http://www.devwiki.net/2016/03/19/Retrofit-Use-Course-2/" target="_blank" rel="external">Retrofit使用教程(二)</a></li>
<li><a href="http://www.devwiki.net/2016/03/25/Retrofit-Use-Course-3/" target="_blank" rel="external">Retrofit使用教程(三)</a></li>
<li><a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="external">RxJava与Retrofit结合的最佳实践</a> 对RxJava讲解最好的文章，没有之一</li>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给Android开发者的RxJava详解</a> 作者抛物线</li>
</ul>
<h1 id="布局框架"><a href="#布局框架" class="headerlink" title="布局框架"></a>布局框架</h1><ul>
<li><a href="https://github.com/chenupt/DragTopLayout" target="_blank" rel="external">DragTopLayout</a> 很不错的<img src="/uploads/kfyxbcdzl1.gif" alt=""></li>
<li><a href="https://github.com/cnbleu/SlideDetailsLayout" target="_blank" rel="external">SlideDetailsLayout</a> 高仿淘宝、京东商品详情页面的上拉加载图文详情功能</li>
</ul>
<h1 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h1><ul>
<li><a href="http://www.jianshu.com/p/b2ca52337fe5" target="_blank" rel="external">Android即时通讯和sns开源项目汇总</a></li>
</ul>
<h1 id="工具类库"><a href="#工具类库" class="headerlink" title="工具类库"></a>工具类库</h1><ul>
<li><a href="https://github.com/litesuits/android-common" target="_blank" rel="external">android-common</a></li>
<li><a href="https://github.com/knightliao/common-utils" target="_blank" rel="external">common-utils</a> 介绍说来自百度</li>
<li><a href="http://www.jianshu.com/p/3e3612c174bc" target="_blank" rel="external">android常用工具类库整理</a> dongjunkun总结的</li>
</ul>
<h1 id="博客推荐"><a href="#博客推荐" class="headerlink" title="博客推荐"></a>博客推荐</h1><ul>
<li><a href="http://shun99.github.io/" target="_blank" rel="external">shun99</a> 据说以后是大牛，哈哈</li>
<li><a href="http://niorgai.github.io/" target="_blank" rel="external">Jianqiu</a> 很喜欢</li>
<li><a href="http://www.jianshu.com/users/6e4c6553a7f9/latest_articles" target="_blank" rel="external">stay4it</a></li>
<li><a href="http://my.csdn.net/lmj623565791" target="_blank" rel="external">鸿洋</a> 不用多解释</li>
<li><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">guolin</a> 每天都会看他的公众号</li>
<li><a href="http://mrfu.me/" target="_blank" rel="external">mrfu</a></li>
</ul>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git</a> 看了你就忘不了</li>
<li><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop" target="_blank" rel="external">postman</a> API测试工具，chrome的一个插件</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用工具类]]></title>
      <url>http://yoursite.com/2016/06/13/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这里总结了一些我在项目开发中常用到的一些工具类。</p>
</blockquote>
<a id="more"></a>
<h2 id="屏幕相关的辅助类"><a href="#屏幕相关的辅助类" class="headerlink" title="屏幕相关的辅助类"></a>屏幕相关的辅助类</h2><ul>
<li>获得屏幕高度</li>
<li>获得屏幕宽度</li>
<li>获得状态栏的高度</li>
<li>获取当前屏幕截图，包含状态栏</li>
<li>获取当前屏幕截图，不包含状态栏</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">import android.app.Activity;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.Rect;</span><br><span class="line">import android.util.DisplayMetrics;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.WindowManager;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获得屏幕相关的辅助类</span><br><span class="line"> */</span><br><span class="line">public class ScreenUtils &#123;</span><br><span class="line">    private ScreenUtils() &#123;</span><br><span class="line">        /** cannot be instantiated **/</span><br><span class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得屏幕高度</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int getScreenWidth(Context context) &#123;</span><br><span class="line">        WindowManager wm = (WindowManager) context</span><br><span class="line">                .getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        DisplayMetrics outMetrics = new DisplayMetrics();</span><br><span class="line">        wm.getDefaultDisplay().getMetrics(outMetrics);</span><br><span class="line">        return outMetrics.widthPixels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得屏幕宽度</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int getScreenHeight(Context context) &#123;</span><br><span class="line">        WindowManager wm = (WindowManager) context</span><br><span class="line">                .getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        DisplayMetrics outMetrics = new DisplayMetrics();</span><br><span class="line">        wm.getDefaultDisplay().getMetrics(outMetrics);</span><br><span class="line">        return outMetrics.heightPixels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获得状态栏的高度</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int getStatusHeight(Context context) &#123;</span><br><span class="line"></span><br><span class="line">        int statusHeight = -1;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(&quot;com.android.internal.R$dimen&quot;);</span><br><span class="line">            Object object = clazz.newInstance();</span><br><span class="line">            int height = Integer.parseInt(clazz.getField(&quot;status_bar_height&quot;)</span><br><span class="line">                    .get(object).toString());</span><br><span class="line">            statusHeight = context.getResources().getDimensionPixelSize(height);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return statusHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前屏幕截图，包含状态栏</span><br><span class="line">     *</span><br><span class="line">     * @param activity</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Bitmap snapShotWithStatusBar(Activity activity) &#123;</span><br><span class="line">        View view = activity.getWindow().getDecorView();</span><br><span class="line">        view.setDrawingCacheEnabled(true);</span><br><span class="line">        view.buildDrawingCache();</span><br><span class="line">        Bitmap bmp = view.getDrawingCache();</span><br><span class="line">        int width = getScreenWidth(activity);</span><br><span class="line">        int height = getScreenHeight(activity);</span><br><span class="line">        Bitmap bp = null;</span><br><span class="line">        bp = Bitmap.createBitmap(bmp, 0, 0, width, height);</span><br><span class="line">        view.destroyDrawingCache();</span><br><span class="line">        return bp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前屏幕截图，不包含状态栏</span><br><span class="line">     *</span><br><span class="line">     * @param activity</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Bitmap snapShotWithoutStatusBar(Activity activity) &#123;</span><br><span class="line">        View view = activity.getWindow().getDecorView();</span><br><span class="line">        view.setDrawingCacheEnabled(true);</span><br><span class="line">        view.buildDrawingCache();</span><br><span class="line">        Bitmap bmp = view.getDrawingCache();</span><br><span class="line">        Rect frame = new Rect();</span><br><span class="line">        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);</span><br><span class="line">        int statusBarHeight = frame.top;</span><br><span class="line"></span><br><span class="line">        int width = getScreenWidth(activity);</span><br><span class="line">        int height = getScreenHeight(activity);</span><br><span class="line">        Bitmap bp = null;</span><br><span class="line">        bp = Bitmap.createBitmap(bmp, 0, statusBarHeight, width, height</span><br><span class="line">                - statusBarHeight);</span><br><span class="line">        view.destroyDrawingCache();</span><br><span class="line">        return bp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="App辅助类"><a href="#App辅助类" class="headerlink" title="App辅助类"></a>App辅助类</h2><ul>
<li>获取应用程序名称</li>
<li>获取应用程序版本名称信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import android.content.Context;</span><br><span class="line">import android.content.pm.PackageInfo;</span><br><span class="line">import android.content.pm.PackageManager;</span><br><span class="line">import android.content.pm.PackageManager.NameNotFoundException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 跟App相关的辅助类</span><br><span class="line"> */</span><br><span class="line">public class AppUtils &#123;</span><br><span class="line"></span><br><span class="line">    private AppUtils() &#123;</span><br><span class="line">        /**cannot be instantiated **/</span><br><span class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取应用程序名称</span><br><span class="line">     */</span><br><span class="line">    public static String getAppName(Context context) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            PackageManager packageManager = context.getPackageManager();</span><br><span class="line">            PackageInfo packageInfo = packageManager.getPackageInfo(</span><br><span class="line">                    context.getPackageName(), 0);</span><br><span class="line">            int labelRes = packageInfo.applicationInfo.labelRes;</span><br><span class="line">            return context.getResources().getString(labelRes);</span><br><span class="line">        &#125; catch (NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * [获取应用程序版本名称信息]</span><br><span class="line">     *</span><br><span class="line">     * @param context</span><br><span class="line">     * @return 当前应用的版本名称</span><br><span class="line">     */</span><br><span class="line">    public static String getVersionName(Context context) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            PackageManager packageManager = context.getPackageManager();</span><br><span class="line">            PackageInfo packageInfo = packageManager.getPackageInfo(</span><br><span class="line">                    context.getPackageName(), 0);</span><br><span class="line">            return packageInfo.versionName;</span><br><span class="line"></span><br><span class="line">        &#125; catch (NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ToastUtils"><a href="#ToastUtils" class="headerlink" title="ToastUtils"></a>ToastUtils</h2><ul>
<li>以来AppUtils</li>
<li>短时间显示</li>
<li>是否长时间显示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import android.content.Context;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/3/9.</span><br><span class="line"> * Toast 管理类</span><br><span class="line"> */</span><br><span class="line">public class ToastUtils &#123;</span><br><span class="line">    public static boolean isShow = true;</span><br><span class="line">    public static Context context = AppUtils.getContext();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 短时间显示</span><br><span class="line">     * @param text</span><br><span class="line">     */</span><br><span class="line">    public static void makeText(String text) &#123;</span><br><span class="line">        if (isShow)</span><br><span class="line">            Toast.makeText(context, text, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否长时间显示</span><br><span class="line">     * @param text</span><br><span class="line">     * @param isLong</span><br><span class="line">     */</span><br><span class="line">    public static void makeText(String text, Boolean isLong) &#123;</span><br><span class="line">        if (isShow) &#123;</span><br><span class="line">            if (isLong) &#123;</span><br><span class="line">                Toast.makeText(context, text, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">            Toast.makeText(context, text, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SharedPreferences工具类"><a href="#SharedPreferences工具类" class="headerlink" title="SharedPreferences工具类"></a>SharedPreferences工具类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import android.content.SharedPreferences;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/3/8.</span><br><span class="line"> */</span><br><span class="line">public class SPUtils &#123;</span><br><span class="line">    public static final String SP_NAME = &quot;config&quot;;</span><br><span class="line"></span><br><span class="line">    private static SharedPreferences getSharedPreferences() &#123;</span><br><span class="line">        return AppUtils.getContext().getSharedPreferences(SP_NAME, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void putBoolean(String key, boolean value) &#123;</span><br><span class="line">        SPUtils.getSharedPreferences().edit().putBoolean(key, value).commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void putString(String key, String value) &#123;</span><br><span class="line">        SPUtils.getSharedPreferences().edit().putString(key, value).commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static boolean getBoolean(String key, boolean defValue) &#123;</span><br><span class="line">        return SPUtils.getSharedPreferences().getBoolean(key, defValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 没有结果时 默认返回空</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getString(String key) &#123;</span><br><span class="line">        return SPUtils.getSharedPreferences().getString(key, &quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单位转换类-DensityUtils"><a href="#单位转换类-DensityUtils" class="headerlink" title="单位转换类 DensityUtils"></a>单位转换类 DensityUtils</h2><ul>
<li>dp转px</li>
<li>sp转px</li>
<li>px转dp</li>
<li>px转sp</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import android.util.TypedValue;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/3/25.</span><br><span class="line"> * 屏幕相关辅助类 ScreenUtils</span><br><span class="line"> */</span><br><span class="line">public class DensityUtils &#123;</span><br><span class="line">    private DensityUtils() &#123;</span><br><span class="line">        /* cannot be instantiated */</span><br><span class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * dp转px</span><br><span class="line">     *</span><br><span class="line">     * @param dpVal</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int dp2px(float dpVal) &#123;</span><br><span class="line">        return (int) (</span><br><span class="line">                TypedValue.applyDimension(</span><br><span class="line">                        TypedValue.COMPLEX_UNIT_DIP, dpVal,</span><br><span class="line">                        AppUtils.getContext().getResources().getDisplayMetrics()</span><br><span class="line">                )</span><br><span class="line">                + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * sp转px</span><br><span class="line">     *</span><br><span class="line">     * @param spVal</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int sp2px(float spVal) &#123;</span><br><span class="line">        return (int) (</span><br><span class="line">                TypedValue.applyDimension(</span><br><span class="line">                        TypedValue.COMPLEX_UNIT_SP, spVal,</span><br><span class="line">                        AppUtils.getContext().getResources().getDisplayMetrics()</span><br><span class="line">                )</span><br><span class="line">                + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * px转dp</span><br><span class="line">     *</span><br><span class="line">     * @param pxVal</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int px2dp(float pxVal) &#123;</span><br><span class="line">        final float scale = AppUtils.getContext().getResources().getDisplayMetrics().density;</span><br><span class="line">        return (int) (pxVal / scale + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * px转sp</span><br><span class="line">     *</span><br><span class="line">     * @param pxVal</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static int px2sp(float pxVal) &#123;</span><br><span class="line">        return (int) (pxVal / AppUtils.getContext().getResources().getDisplayMetrics().scaledDensity + 0.5f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import android.content.Context;</span><br><span class="line">import android.view.inputmethod.InputMethodManager;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 打开或关闭软键盘</span><br><span class="line"> *</span><br><span class="line"> * @author zhy</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class KeyBoardUtils</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 打卡软键盘</span><br><span class="line">     *</span><br><span class="line">     * @param mEditText</span><br><span class="line">     *            输入框</span><br><span class="line">     * @param mContext</span><br><span class="line">     * 上下文</span><br><span class="line">     */</span><br><span class="line">    public static void openKeybord(EditText mEditText, Context mContext)</span><br><span class="line">    &#123;</span><br><span class="line">        InputMethodManager imm = (InputMethodManager) mContext</span><br><span class="line">                .getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">        imm.showSoftInput(mEditText, InputMethodManager.RESULT_SHOWN);</span><br><span class="line">        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,</span><br><span class="line">                InputMethodManager.HIDE_IMPLICIT_ONLY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关闭软键盘</span><br><span class="line">     *</span><br><span class="line">     * @param mEditText</span><br><span class="line">     * 输入框</span><br><span class="line">     * @param mContext</span><br><span class="line">     * 上下文</span><br><span class="line">     */</span><br><span class="line">    public static void closeKeybord(EditText mEditText, Context mContext)</span><br><span class="line">    &#123;</span><br><span class="line">        InputMethodManager imm = (InputMethodManager) mContext</span><br><span class="line">                .getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line"></span><br><span class="line">        imm.hideSoftInputFromWindow(mEditText.getWindowToken(), 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SD卡相关的辅助类"><a href="#SD卡相关的辅助类" class="headerlink" title="SD卡相关的辅助类"></a>SD卡相关的辅助类</h2><ul>
<li>判断SDCard是否可用</li>
<li>获取SD卡路径</li>
<li>获取SD卡的剩余容量 单位byte</li>
<li>获取指定路径所在空间的剩余可用容量字节数，单位byte</li>
<li>获取系统存储路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import android.os.Environment;</span><br><span class="line">import android.os.StatFs;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * SD卡相关的辅助类</span><br><span class="line"> */</span><br><span class="line">public class SDCardUtils</span><br><span class="line">&#123;</span><br><span class="line">    private SDCardUtils()</span><br><span class="line">    &#123;</span><br><span class="line">        /** cannot be instantiated **/</span><br><span class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断SDCard是否可用</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static boolean isSDCardEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        return Environment.getExternalStorageState().equals(</span><br><span class="line">                Environment.MEDIA_MOUNTED);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取SD卡路径</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getSDCardPath()</span><br><span class="line">    &#123;</span><br><span class="line">        return Environment.getExternalStorageDirectory().getAbsolutePath()</span><br><span class="line">                + File.separator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取SD卡的剩余容量 单位byte</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static long getSDCardAllSize()</span><br><span class="line">    &#123;</span><br><span class="line">        if (isSDCardEnable())</span><br><span class="line">        &#123;</span><br><span class="line">            StatFs stat = new StatFs(getSDCardPath());</span><br><span class="line">            // 获取空闲的数据块的数量</span><br><span class="line">            long availableBlocks = (long) stat.getAvailableBlocks() - 4;</span><br><span class="line">            // 获取单个数据块的大小（byte）</span><br><span class="line">            long freeBlocks = stat.getAvailableBlocks();</span><br><span class="line">            return freeBlocks * availableBlocks;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取指定路径所在空间的剩余可用容量字节数，单位byte</span><br><span class="line">     *</span><br><span class="line">     * @param filePath</span><br><span class="line">     * @return 容量字节 SDCard可用空间，内部存储可用空间</span><br><span class="line">     */</span><br><span class="line">    public static long getFreeBytes(String filePath)</span><br><span class="line">    &#123;</span><br><span class="line">        // 如果是sd卡的下的路径，则获取sd卡可用容量</span><br><span class="line">        if (filePath.startsWith(getSDCardPath()))</span><br><span class="line">        &#123;</span><br><span class="line">            filePath = getSDCardPath();</span><br><span class="line">        &#125; else</span><br><span class="line">        &#123;// 如果是内部存储的路径，则获取内存存储的可用容量</span><br><span class="line">            filePath = Environment.getDataDirectory().getAbsolutePath();</span><br><span class="line">        &#125;</span><br><span class="line">        StatFs stat = new StatFs(filePath);</span><br><span class="line">        long availableBlocks = (long) stat.getAvailableBlocks() - 4;</span><br><span class="line">        return stat.getBlockSize() * availableBlocks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取系统存储路径</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getRootDirectoryPath()</span><br><span class="line">    &#123;</span><br><span class="line">        return Environment.getRootDirectory().getAbsolutePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="LogUtils日志打印类"><a href="#LogUtils日志打印类" class="headerlink" title="LogUtils日志打印类"></a>LogUtils日志打印类</h2><ul>
<li><p>只输出等级大于等于LEVEL的日志</p>
<ul>
<li>所以在开发和产品发布后通过修改LEVEL来选择性输出日志.</li>
<li>当LEVEL=NOTHING则屏蔽了所有的日志.</li>
</ul>
</li>
<li><p>v,d,i,w,e均对应两个方法</p>
<ul>
<li>若不设置TAG或者TAG为空则为设置默认TAG</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">import android.text.TextUtils;</span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">public class LogUtils &#123;</span><br><span class="line">	public static final int VERBOSE = 1;</span><br><span class="line">	public static final int DEBUG = 2;</span><br><span class="line">	public static final int INFO = 3;</span><br><span class="line">	public static final int WARN = 4;</span><br><span class="line">	public static final int ERROR = 5;</span><br><span class="line">	public static final int NOTHING = 6;</span><br><span class="line">	public static final int LEVEL = VERBOSE;</span><br><span class="line">	public static final String SEPARATOR = &quot;,&quot;;</span><br><span class="line"></span><br><span class="line">	public static void v(String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= VERBOSE) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			String tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			Log.v(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void v(String tag, String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= VERBOSE) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			if (TextUtils.isEmpty(tag)) &#123;</span><br><span class="line">				tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			&#125;</span><br><span class="line">			Log.v(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void d(String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= DEBUG) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			String tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			Log.d(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void d(String tag, String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= DEBUG) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			if (TextUtils.isEmpty(tag)) &#123;</span><br><span class="line">				tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			&#125;</span><br><span class="line">			Log.d(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void i(String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= INFO) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			String tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			Log.i(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void i(String tag, String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= INFO) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			if (TextUtils.isEmpty(tag)) &#123;</span><br><span class="line">				tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			&#125;</span><br><span class="line">			Log.i(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void w(String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= WARN) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			String tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			Log.w(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void w(String tag, String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= WARN) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			if (TextUtils.isEmpty(tag)) &#123;</span><br><span class="line">				tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			&#125;</span><br><span class="line">			Log.w(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void e(String tag, String message) &#123;</span><br><span class="line">		if (LEVEL &lt;= ERROR) &#123;</span><br><span class="line">			StackTraceElement stackTraceElement = Thread.currentThread().getStackTrace()[3];</span><br><span class="line">			if (TextUtils.isEmpty(tag)) &#123;</span><br><span class="line">				tag = getDefaultTag(stackTraceElement);</span><br><span class="line">			&#125;</span><br><span class="line">			Log.e(tag, getLogInfo(stackTraceElement) + message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 获取默认的TAG名称. </span><br><span class="line">	 * 比如在MainActivity.java中调用了日志输出. </span><br><span class="line">	 * 则TAG为MainActivity</span><br><span class="line">	 */</span><br><span class="line">	public static String getDefaultTag(StackTraceElement stackTraceElement) &#123;</span><br><span class="line">		String fileName = stackTraceElement.getFileName();</span><br><span class="line">		String stringArray[] = fileName.split(&quot;\\.&quot;);</span><br><span class="line">		String tag = stringArray[0];</span><br><span class="line">		return tag;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * 输出日志所包含的信息</span><br><span class="line">	 */</span><br><span class="line">	public static String getLogInfo(StackTraceElement stackTraceElement) &#123;</span><br><span class="line">		StringBuilder logInfoStringBuilder = new StringBuilder();</span><br><span class="line">		// 获取线程名</span><br><span class="line">		String threadName = Thread.currentThread().getName();</span><br><span class="line">		// 获取线程ID</span><br><span class="line">		long threadID = Thread.currentThread().getId();</span><br><span class="line">		// 获取文件名.即xxx.java</span><br><span class="line">		String fileName = stackTraceElement.getFileName();</span><br><span class="line">		// 获取类名.即包名+类名</span><br><span class="line">		String className = stackTraceElement.getClassName();</span><br><span class="line">		// 获取方法名称</span><br><span class="line">		String methodName = stackTraceElement.getMethodName();</span><br><span class="line">		// 获取生日输出行数</span><br><span class="line">		int lineNumber = stackTraceElement.getLineNumber();</span><br><span class="line"></span><br><span class="line">		logInfoStringBuilder.append(&quot;[ &quot;);</span><br><span class="line">		logInfoStringBuilder.append(&quot;threadID=&quot; + threadID).append(SEPARATOR);</span><br><span class="line">		logInfoStringBuilder.append(&quot;threadName=&quot; + threadName).append(SEPARATOR);</span><br><span class="line">		logInfoStringBuilder.append(&quot;fileName=&quot; + fileName).append(SEPARATOR);</span><br><span class="line">		logInfoStringBuilder.append(&quot;className=&quot; + className).append(SEPARATOR);</span><br><span class="line">		logInfoStringBuilder.append(&quot;methodName=&quot; + methodName).append(SEPARATOR);</span><br><span class="line">		logInfoStringBuilder.append(&quot;lineNumber=&quot; + lineNumber);</span><br><span class="line">		logInfoStringBuilder.append(&quot; ] &quot;);</span><br><span class="line">		return logInfoStringBuilder.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[加密]]></title>
      <url>http://yoursite.com/2016/06/13/%E5%8A%A0%E5%AF%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>加密可以保证数的安全性</p>
</blockquote>
<a id="more"></a>
<h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line">public class MD5Encoder &#123;</span><br><span class="line"></span><br><span class="line">	public static String encode(String string) throws Exception &#123;</span><br><span class="line">		byte[] hash = MessageDigest.getInstance(&quot;MD5&quot;).digest(</span><br><span class="line">				string.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">		StringBuilder hex = new StringBuilder(hash.length * 2);</span><br><span class="line">		for (byte b : hash) &#123;</span><br><span class="line">			if ((b &amp; 0xFF) &lt; 0x10) &#123;</span><br><span class="line">				hex.append(&quot;0&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			hex.append(Integer.toHexString(b &amp; 0xFF));</span><br><span class="line">		&#125;</span><br><span class="line">		return hex.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图片的三级缓存]]></title>
      <url>http://yoursite.com/2016/06/13/%E5%9B%BE%E7%89%87%E7%9A%84%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>三级缓存策略，使用网络、本地、内存三级缓存图片，一方面来减少不必要的网络交互，避免浪费流量，另一方面内存缓存速度最快 &gt; 本地缓存 &gt; 网络缓存,使用三级缓存提高加载速度。</p>
</blockquote>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首次加载图片时，首次请求某张图片时，通过网络交互获取图片，并将图片保存至本地SD卡和内存中。只好再次访问图片是，优先访问内存中的图片缓存，若内存中没有，则加载本地SD卡中的图片。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h4 id="自定义的图片缓存工具类（MyBitmapUtils）"><a href="#自定义的图片缓存工具类（MyBitmapUtils）" class="headerlink" title="自定义的图片缓存工具类（MyBitmapUtils）"></a>自定义的图片缓存工具类（MyBitmapUtils）</h4><ul>
<li><p>通过new MyBitmapUtils().display(ImageView ivPic, String url) 提供给外部方法进行图片缓存的接口</p>
</li>
<li><p>参数含义：ivPic 用于显示图片的ImageView，url 获取图片的网络地址</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 自定义的BitmapUtils,实现三级缓存</span><br><span class="line">   */</span><br><span class="line">  public class MyBitmapUtils &#123;</span><br><span class="line"></span><br><span class="line">      private NetCacheUtils mNetCacheUtils;</span><br><span class="line">      private LocalCacheUtils mLocalCacheUtils;</span><br><span class="line">      private MemoryCacheUtils mMemoryCacheUtils;</span><br><span class="line"></span><br><span class="line">      public MyBitmapUtils()&#123;</span><br><span class="line">          mMemoryCacheUtils=new MemoryCacheUtils();</span><br><span class="line">          mLocalCacheUtils=new LocalCacheUtils();</span><br><span class="line">          mNetCacheUtils=new NetCacheUtils(mLocalCacheUtils,mMemoryCacheUtils);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      public void disPlay(ImageView ivPic, String url) &#123;</span><br><span class="line">          ivPic.setImageResource(R.mipmap.pic_item_list_default);</span><br><span class="line">          Bitmap bitmap;</span><br><span class="line">          //内存缓存</span><br><span class="line">          bitmap=mMemoryCacheUtils.getBitmapFromMemory(url);</span><br><span class="line">          if (bitmap!=null)&#123;</span><br><span class="line">              ivPic.setImageBitmap(bitmap);</span><br><span class="line">              System.out.println(&quot;从内存获取图片啦.....&quot;);</span><br><span class="line">              return;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          //本地缓存</span><br><span class="line">          bitmap = mLocalCacheUtils.getBitmapFromLocal(url);</span><br><span class="line">          if(bitmap !=null)&#123;</span><br><span class="line">              ivPic.setImageBitmap(bitmap);</span><br><span class="line">              System.out.println(&quot;从本地获取图片啦.....&quot;);</span><br><span class="line">              //从本地获取图片后,保存至内存中</span><br><span class="line">              mMemoryCacheUtils.setBitmapToMemory(url,bitmap);</span><br><span class="line">              return;</span><br><span class="line">          &#125;</span><br><span class="line">          //网络缓存</span><br><span class="line">          mNetCacheUtils.getBitmapFromNet(ivPic,url);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="网络缓存（NetCacheUtils）"><a href="#网络缓存（NetCacheUtils）" class="headerlink" title="网络缓存（NetCacheUtils）"></a>网络缓存（NetCacheUtils）</h4><ul>
<li><p>为了避免内存溢出的问题，我们可以在获取网络图片后。对其进行图片压缩</p>
</li>
<li><p>此处网络请求中用到的是AsyncTask+HttpURLConnection来进行异步数据的加载。</p>
</li>
<li><p>实际使用中可更换为第三方框架加载图片。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 三级缓存之网络缓存</span><br><span class="line">   */</span><br><span class="line">  public class NetCacheUtils &#123;</span><br><span class="line"></span><br><span class="line">      private LocalCacheUtils mLocalCacheUtils;</span><br><span class="line">      private MemoryCacheUtils mMemoryCacheUtils;</span><br><span class="line"></span><br><span class="line">      public NetCacheUtils(LocalCacheUtils localCacheUtils, MemoryCacheUtils memoryCacheUtils) &#123;</span><br><span class="line">          mLocalCacheUtils = localCacheUtils;</span><br><span class="line">          mMemoryCacheUtils = memoryCacheUtils;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 从网络下载图片</span><br><span class="line">       * @param ivPic 显示图片的imageview</span><br><span class="line">       * @param url   下载图片的网络地址</span><br><span class="line">       */</span><br><span class="line">      public void getBitmapFromNet(ImageView ivPic, String url) &#123;</span><br><span class="line">          new BitmapTask().execute(ivPic, url);//启动AsyncTask</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * AsyncTask就是对handler和线程池的封装</span><br><span class="line">       * 第一个泛型:参数类型</span><br><span class="line">       * 第二个泛型:更新进度的泛型</span><br><span class="line">       * 第三个泛型:onPostExecute的返回结果</span><br><span class="line">       */</span><br><span class="line">      class BitmapTask extends AsyncTask&lt;Object, Void, Bitmap&gt; &#123;</span><br><span class="line"></span><br><span class="line">          private ImageView ivPic;</span><br><span class="line">          private String url;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line">           * 后台耗时操作,存在于子线程中</span><br><span class="line">           * @param params</span><br><span class="line">           * @return</span><br><span class="line">           */</span><br><span class="line">          @Override</span><br><span class="line">          protected Bitmap doInBackground(Object[] params) &#123;</span><br><span class="line">              ivPic = (ImageView) params[0];</span><br><span class="line">              url = (String) params[1];</span><br><span class="line"></span><br><span class="line">              return downLoadBitmap(url);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line">           * 更新进度,在主线程中</span><br><span class="line">           * @param values</span><br><span class="line">           */</span><br><span class="line">          @Override</span><br><span class="line">          protected void onProgressUpdate(Void[] values) &#123;</span><br><span class="line">              super.onProgressUpdate(values);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line">           * 耗时方法结束后执行该方法,主线程中</span><br><span class="line">           * @param result</span><br><span class="line">           */</span><br><span class="line">          @Override</span><br><span class="line">          protected void onPostExecute(Bitmap result) &#123;</span><br><span class="line">              if (result != null) &#123;</span><br><span class="line">                  ivPic.setImageBitmap(result);</span><br><span class="line">                  System.out.println(&quot;从网络缓存图片啦.....&quot;);</span><br><span class="line"></span><br><span class="line">                  //从网络获取图片后,保存至本地缓存</span><br><span class="line">                  mLocalCacheUtils.setBitmapToLocal(url, result);</span><br><span class="line">                  //保存至内存中</span><br><span class="line">                  mMemoryCacheUtils.setBitmapToMemory(url, result);</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 网络下载图片</span><br><span class="line">       * @param url</span><br><span class="line">       * @return</span><br><span class="line">       */</span><br><span class="line">      private Bitmap downLoadBitmap(String url) &#123;</span><br><span class="line">          HttpURLConnection conn = null;</span><br><span class="line">          try &#123;</span><br><span class="line">              conn = (HttpURLConnection) new URL(url).openConnection();</span><br><span class="line">              conn.setConnectTimeout(5000);</span><br><span class="line">              conn.setReadTimeout(5000);</span><br><span class="line">              conn.setRequestMethod(&quot;GET&quot;);</span><br><span class="line"></span><br><span class="line">              int responseCode = conn.getResponseCode();</span><br><span class="line">              if (responseCode == 200) &#123;</span><br><span class="line">                  //图片压缩</span><br><span class="line">                  BitmapFactory.Options options = new BitmapFactory.Options();</span><br><span class="line">                  options.inSampleSize=2;//宽高压缩为原来的1/2</span><br><span class="line">                  options.inPreferredConfig=Bitmap.Config.ARGB_4444;</span><br><span class="line">                  Bitmap bitmap = BitmapFactory.decodeStream(conn.getInputStream(),null,options);</span><br><span class="line">                  return bitmap;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; catch (IOException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125; finally &#123;</span><br><span class="line">              conn.disconnect();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          return null;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="本地缓存（LocalCacheUtils）"><a href="#本地缓存（LocalCacheUtils）" class="headerlink" title="本地缓存（LocalCacheUtils）"></a>本地缓存（LocalCacheUtils）</h4><ul>
<li><p>在初次通过网络获取图片后，我们可以在本地SD卡中将图片保存起来</p>
</li>
<li><p>可以使用MD5加密图片的网络地址，来作为图片的名称保存</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 三级缓存之本地缓存</span><br><span class="line">   */</span><br><span class="line">  public class LocalCacheUtils &#123;</span><br><span class="line"></span><br><span class="line">      private static final String CACHE_PATH= Environment.getExternalStorageDirectory().getAbsolutePath()+&quot;/WerbNews&quot;;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 从本地读取图片</span><br><span class="line">       * @param url</span><br><span class="line">       */</span><br><span class="line">      public Bitmap getBitmapFromLocal(String url)&#123;</span><br><span class="line">          String fileName = null;//把图片的url当做文件名,并进行MD5加密</span><br><span class="line">          try &#123;</span><br><span class="line">              fileName = MD5Encoder.encode(url);</span><br><span class="line">              File file=new File(CACHE_PATH,fileName);</span><br><span class="line"></span><br><span class="line">              Bitmap bitmap = BitmapFactory.decodeStream(new FileInputStream(file));</span><br><span class="line"></span><br><span class="line">              return bitmap;</span><br><span class="line">          &#125; catch (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          return null;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 从网络获取图片后,保存至本地缓存</span><br><span class="line">       * @param url</span><br><span class="line">       * @param bitmap</span><br><span class="line">       */</span><br><span class="line">      public void setBitmapToLocal(String url,Bitmap bitmap)&#123;</span><br><span class="line">          try &#123;</span><br><span class="line">              String fileName = MD5Encoder.encode(url);//把图片的url当做文件名,并进行MD5加密</span><br><span class="line">              File file=new File(CACHE_PATH,fileName);</span><br><span class="line"></span><br><span class="line">              //通过得到文件的父文件,判断父文件是否存在</span><br><span class="line">              File parentFile = file.getParentFile();</span><br><span class="line">              if (!parentFile.exists())&#123;</span><br><span class="line">                  parentFile.mkdirs();</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              //把图片保存至本地</span><br><span class="line">              bitmap.compress(Bitmap.CompressFormat.JPEG,100,new FileOutputStream(file));</span><br><span class="line">          &#125; catch (Exception e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="内存缓存（MemoryCacheUtils）"><a href="#内存缓存（MemoryCacheUtils）" class="headerlink" title="内存缓存（MemoryCacheUtils）"></a>内存缓存（MemoryCacheUtils）</h4><ul>
<li><p>进行内存缓存，就一定要注意一个问题，那就是内存溢出（OutOfMemory）</p>
</li>
<li><p>为什么会造成内存溢出？</p>
<ul>
<li>Android 虚拟机默认分配给每个App 16M的内存空间，真机会比16M大，但任会出现内存溢出的情况</li>
<li>Android 系统在加载图片时是解析每一个像素的信息，再把每一个像素全部保存至内存中</li>
<li>图片大小 = 图片的总像素 * 每个像素占用的大小<blockquote>
<p>单色图：每个像素占用1/8个字节，16色图：每个像素占用1/2个字节，256色图：每个像素占用1个字节，24位图：每个像素占用3个字节（常见的rgb构成的图片）</p>
</blockquote>
</li>
<li>例如一张1920x1080的JPG图片，在Android 系统中是以ARGB格式解析的，即一个像素需占用4个字节，图片的大小=1920x1080x4=7M</li>
</ul>
</li>
<li><p>实现方法：</p>
<ul>
<li>通过 HashMap<string,bitmap>键值对的方式保存图片，key为地址，value为图片对象，但因是强引用对象，很容易造成内存溢出，可以尝试SoftReference软引用对象</string,bitmap></li>
<li>通过 HashMap<string, softreference<bitmap="">&gt;SoftReference 为软引用对象（GC垃圾回收会自动回收软引用对象），但在Android2.3+后，系统会优先考虑回收弱引用对象，官方提出使用LruCache</string,></li>
<li>通过 LruCache<string,bitmap> least recentlly use 最少最近使用算法<br>会将内存控制在一定的大小内, 超出最大值时会自动回收, 这个最大值开发者自己定.</string,bitmap></li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 三级缓存之内存缓存</span><br><span class="line">   */</span><br><span class="line">  public class MemoryCacheUtils &#123;</span><br><span class="line"></span><br><span class="line">      // private HashMap&lt;String,Bitmap&gt; mMemoryCache=new HashMap&lt;&gt;();//1.因为强引用,容易造成内存溢出，所以考虑使用下面弱引用的方法</span><br><span class="line">      // private HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt; mMemoryCache = new HashMap&lt;&gt;();//2.因为在Android2.3+后,系统会优先考虑回收弱引用对象,官方提出使用LruCache</span><br><span class="line">      private LruCache&lt;String,Bitmap&gt; mMemoryCache;</span><br><span class="line"></span><br><span class="line">      public MemoryCacheUtils()&#123;</span><br><span class="line">          long maxMemory = Runtime.getRuntime().maxMemory()/8;//得到手机最大允许内存的1/8,即超过指定内存,则开始回收</span><br><span class="line">          //需要传入允许的内存最大值,虚拟机默认内存16M,真机不一定相同</span><br><span class="line">          mMemoryCache=new LruCache&lt;String,Bitmap&gt;((int) maxMemory)&#123;</span><br><span class="line">              //用于计算每个条目的大小</span><br><span class="line">              @Override</span><br><span class="line">              protected int sizeOf(String key, Bitmap value) &#123;</span><br><span class="line">                  int byteCount = value.getByteCount();</span><br><span class="line">                  return byteCount;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 从内存中读图片</span><br><span class="line">       * @param url</span><br><span class="line">       */</span><br><span class="line">      public Bitmap getBitmapFromMemory(String url) &#123;</span><br><span class="line">          //Bitmap bitmap = mMemoryCache.get(url);//1.强引用方法</span><br><span class="line">          /*2.弱引用方法</span><br><span class="line">          SoftReference&lt;Bitmap&gt; bitmapSoftReference = mMemoryCache.get(url);</span><br><span class="line">          if (bitmapSoftReference != null) &#123;</span><br><span class="line">              Bitmap bitmap = bitmapSoftReference.get();</span><br><span class="line">              return bitmap;</span><br><span class="line">          &#125;</span><br><span class="line">          */</span><br><span class="line">          Bitmap bitmap = mMemoryCache.get(url);</span><br><span class="line">          return bitmap;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 往内存中写图片</span><br><span class="line">       * @param url</span><br><span class="line">       * @param bitmap</span><br><span class="line">       */</span><br><span class="line">      public void setBitmapToMemory(String url, Bitmap bitmap) &#123;</span><br><span class="line">          //mMemoryCache.put(url, bitmap);//1.强引用方法</span><br><span class="line">          /*2.弱引用方法</span><br><span class="line">          mMemoryCache.put(url, new SoftReference&lt;&gt;(bitmap));</span><br><span class="line">          */</span><br><span class="line">          mMemoryCache.put(url,bitmap);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于MVP的一点事]]></title>
      <url>http://yoursite.com/2016/06/12/%E5%85%B3%E4%BA%8EMVP%E7%9A%84%E4%B8%80%E7%82%B9%E4%BA%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Android MVP模式对我们来说已经不陌生了，看到论坛和一些博客都在吹他，我就google了一下，然后试着试用一下，结合资料分享一下心得。</p>
</blockquote>
<a id="more"></a>
<h2 id="mvp项目结构"><a href="#mvp项目结构" class="headerlink" title="mvp项目结构"></a>mvp项目结构</h2><p>如果项目比较大，根基功能模块划分mvp模式。</p>
<ul>
<li>app – 各Application Activity Fragment Presenter等的顶级父类</li>
<li>config – API,常量表等</li>
<li>utils– 各个可复用View集合</li>
<li>widget – 各个可复用View集合</li>
<li>module——将界面层以功能模块分配包:<ul>
<li>login<ul>
<li>model<ul>
<li>Iuser</li>
<li>UserModel</li>
</ul>
</li>
<li>presenter<ul>
<li>ILoginPresenter</li>
<li>LoginPresenterCompl</li>
</ul>
</li>
<li>view<ul>
<li>ILoginView</li>
<li>LoginActivity</li>
</ul>
</li>
</ul>
</li>
<li>main</li>
</ul>
</li>
</ul>
<h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>MVP模式是MVC模式在Android上的一种变体，要介绍MVP就得先介绍MVC。在MVC模式中，Activity应该是属于View这一层。而实质上，它既承担了View，同时也包含一些Controller的东西在里面。这对于开发与维护来说不太友好，耦合度大高了。把Activity的View和Controller抽离出来就变成了View和Presenter，这就是MVP模式。（摘抄）<br>MVC模式的结构分为三部分，实体层的Model，视图层的View，以及控制层的Controller<br><img src="/uploads/gymvp1.png" alt=""></p>
<ul>
<li><p>其中View层其实就是程序的UI界面，用于向用户展示数据以及接收用户的输入</p>
</li>
<li><p>而Model层就是JavaBean实体类，用于保存实例数据</p>
</li>
<li><p>Controller控制器用于更新UI界面和数据实例</p>
</li>
</ul>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在Android项目中，Activity和Fragment占据了大部分的开发工作。如果有一种设计模式（或者说代码结构）专门是为优化Activity和Fragment的代码而产生的，你说这种模式重要不？这就是MVP设计模式。</p>
<blockquote>
<p>MVP把Activity中的UI逻辑抽象成View接口，把业务逻辑抽象成Presenter接口，Model类还是原来的Model。</p>
</blockquote>
<p>这就是MVP模式，现在这样的话，Activity的工作的简单了，只用来响应生命周期，其他工作都丢到Presenter中去完成。从上图可以看出，Presenter是Model和View之间的桥梁，为了让结构变得更加简单，View并不能直接对Model进行操作，这也是MVP与MVC最大的不同之处。</p>
<h3 id="MVP模式的作用"><a href="#MVP模式的作用" class="headerlink" title="MVP模式的作用"></a>MVP模式的作用</h3><ul>
<li><p>分离了视图逻辑和业务逻辑，降低了耦合</p>
</li>
<li><p>Activity只处理生命周期的任务，代码变得更加简洁</p>
</li>
<li><p>视图逻辑和业务逻辑分别抽象到了View和Presenter的接口中去，提高代码的可阅读性</p>
</li>
<li><p>Presenter被抽象成接口，可以有多种具体的实现，所以方便进行单元测试</p>
</li>
<li><p>把业务逻辑抽到Presenter中去，避免后台线程引用着Activity导致Activity的资源无法被系统回收从而引起内存泄露和OOM</p>
</li>
</ul>
<h3 id="MVP模式的使用"><a href="#MVP模式的使用" class="headerlink" title="MVP模式的使用"></a>MVP模式的使用</h3><p><img src="/uploads/gymvp2.png" alt=""><br>上面一张简单的MVP模式的UML图，从图中可以看出，使用MVP，至少需要经历以下步骤：</p>
<ul>
<li><p>创建IPresenter接口，把所有业务逻辑的接口都放在这里，并创建它的实现PresenterCompl（在这里可以方便地查看业务功能，由于接口可以有多种实现所以也方便写单元测试）</p>
</li>
<li><p>创建IView接口，把所有视图逻辑的接口都放在这里，其实现类是当前的Activity/Fragment由UML图可以看出，Activity里包含了一个IPresenter，而PresenterCompl里又包含了一个IView并且依赖了Model。Activity里只保留对IPresenter的调用，其它工作全部留到PresenterCompl中实现</p>
</li>
<li><p>Model并不是必须有的，但是一定会有View和Presenter</p>
</li>
</ul>
<p>通过上面的介绍，MVP的主要特点就是把Activity里的许多逻辑都抽离到View和Presenter接口中去，并由具体的实现类来完成。这种写法多了许多IView和IPresenter的接口，在某种程度上加大了开发的工作量，刚开始使用MVP的小伙伴可能会觉得这种写法比较别扭，而且难以记住。其实一开始想太多也没有什么卵用，只要在具体项目中多写几次，就能熟悉MVP模式的写法，理解TA的意图，以及享受其带来的好处。</p>
<h3 id="MVP案例"><a href="#MVP案例" class="headerlink" title="MVP案例"></a>MVP案例</h3><p><img src="/uploads/gymvp3.png" alt=""><br>项目结构看起来像是这个样子的，MVP的分层还是很清晰的。我的习惯是先按模块分Package，在模块下面再去创建model、view、presenter的子Package，当然也可以用model、view、presenter作为顶级的Package，然后把所有的模块的model、view、presenter类都到这三个顶级Package中，就好像有人喜欢把项目里所有的Activity、Fragment、Adapter都放在一起一样。</p>
<h4 id="首先来看看LoginActivity"><a href="#首先来看看LoginActivity" class="headerlink" title="首先来看看LoginActivity"></a>首先来看看LoginActivity</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public class LoginActivity extends ActionBarActivity implements ILoginView, View.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    private EditText editUser;</span><br><span class="line">    private EditText editPass;</span><br><span class="line">    private Button   btnLogin;</span><br><span class="line">    private Button   btnClear;</span><br><span class="line">    ILoginPresenter loginPresenter;</span><br><span class="line">    private ProgressBar progressBar;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        //find view</span><br><span class="line">        editUser = (EditText) this.findViewById(R.id.et_login_username);</span><br><span class="line">        editPass = (EditText) this.findViewById(R.id.et_login_password);</span><br><span class="line">        btnLogin = (Button) this.findViewById(R.id.btn_login_login);</span><br><span class="line">        btnClear = (Button) this.findViewById(R.id.btn_login_clear);</span><br><span class="line">        progressBar = (ProgressBar) this.findViewById(R.id.progress_login);</span><br><span class="line"></span><br><span class="line">        //set listener</span><br><span class="line">        btnLogin.setOnClickListener(this);</span><br><span class="line">        btnClear.setOnClickListener(this);</span><br><span class="line"></span><br><span class="line">        //init</span><br><span class="line">        loginPresenter = new LoginPresenterCompl(this);</span><br><span class="line">        loginPresenter.setProgressBarVisiblity(View.INVISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        switch (v.getId())&#123;</span><br><span class="line">            case R.id.btn_login_clear:</span><br><span class="line">                loginPresenter.clear();</span><br><span class="line">                break;</span><br><span class="line">            case R.id.btn_login_login:</span><br><span class="line">                loginPresenter.setProgressBarVisiblity(View.VISIBLE);</span><br><span class="line">                btnLogin.setEnabled(false);</span><br><span class="line">                btnClear.setEnabled(false);</span><br><span class="line">                loginPresenter.doLogin(editUser.getText().toString(), editPass.getText().toString());</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClearText() &#123;</span><br><span class="line">        editUser.setText(&quot;&quot;);</span><br><span class="line">        editPass.setText(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onLoginResult(Boolean result, int code) &#123;</span><br><span class="line">        loginPresenter.setProgressBarVisiblity(View.INVISIBLE);</span><br><span class="line">        btnLogin.setEnabled(true);</span><br><span class="line">        btnClear.setEnabled(true);</span><br><span class="line">        if (result)&#123;</span><br><span class="line">            Toast.makeText(this,&quot;Login Success&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">            startActivity(new Intent(this, HomeActivity.class));</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            Toast.makeText(this,&quot;Login Fail, code = &quot; + code,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onSetProgressBarVisibility(int visibility) &#123;</span><br><span class="line">        progressBar.setVisibility(visibility);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码可以看出LoginActivity只做了findView以及setListener的工作，而且包含了一个ILoginPresenter，所有业务逻辑都是通过调用ILoginPresenter的具体接口来完成。所以LoginActivity的代码看起来很舒爽，甚至有点愉♂悦呢。视力不错的你可能还看到了ILoginView接口的实现，如果不懂为什么要这样写的话，可以先往下看，这里只要记住LoginActivity实现了ILoginView接口。</p>
<h4 id="再来看看ILoginPresenter"><a href="#再来看看ILoginPresenter" class="headerlink" title="再来看看ILoginPresenter"></a>再来看看ILoginPresenter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface ILoginPresenter &#123;</span><br><span class="line">    void clear();</span><br><span class="line">    void doLogin(String name, String passwd);</span><br><span class="line">    void setProgressBarVisiblity(int visiblity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class LoginPresenterCompl implements ILoginPresenter &#123;</span><br><span class="line">    ILoginView iLoginView;</span><br><span class="line">    IUser user;</span><br><span class="line">    Handler    handler;</span><br><span class="line"></span><br><span class="line">    public LoginPresenterCompl(ILoginView iLoginView) &#123;</span><br><span class="line">        this.iLoginView = iLoginView;</span><br><span class="line">        initUser();</span><br><span class="line">        handler = new Handler(Looper.getMainLooper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        iLoginView.onClearText();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doLogin(String name, String passwd) &#123;</span><br><span class="line">        Boolean isLoginSuccess = true;</span><br><span class="line">        final int code = user.checkUserValidity(name,passwd);</span><br><span class="line">        if (code!=0) isLoginSuccess = false;</span><br><span class="line">        final Boolean result = isLoginSuccess;</span><br><span class="line">        handler.postDelayed(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                iLoginView.onLoginResult(result, code);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, 3000);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setProgressBarVisiblity(int visiblity)&#123;</span><br><span class="line">        iLoginView.onSetProgressBarVisibility(visiblity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initUser()&#123;</span><br><span class="line">        user = new UserModel(&quot;mvp&quot;,&quot;mvp&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码可以看出，LoginPresenterCompl保留了ILoginView的引用，因此在LoginPresenterCompl里就可以直接进行UI操作了，而不用在Activity里完成。这里使用了ILoginView引用，而不是直接使用Activity，这样一来，如果在别的Activity里也需要用到相同的业务逻辑，就可以直接复用LoginPresenterCompl类了（一个Activity可以包含一个以上的Presenter，总之，需要什么业务就new什么样的Presenter，是不是很灵活，这也是MVP的核心思想</p>
<blockquote>
<p>通过IVIew和IPresenter，把Activity的UI Logic和Business Logic分离开来，Activity just does its basic job! 至于Model嘛，还是原来MVC里的Model。</p>
</blockquote>
<h4 id="再来看看ILoginViews"><a href="#再来看看ILoginViews" class="headerlink" title="再来看看ILoginViews"></a>再来看看ILoginViews</h4><p>至于ILoginView的实现类呢，翻到上面看看LoginActivity吧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface ILoginView &#123;</span><br><span class="line">    public void onClearText();</span><br><span class="line">    public void onLoginResult(Boolean result, int code);</span><br><span class="line">    public void onSetProgressBarVisibility(int visibility);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##参考资料<br><a href="https://segmentfault.com/a/1190000003927200" target="_blank" rel="external">Android MVP模式 简单易懂的介绍方式</a><br><a href="https://github.com/shun99/android-mvp-pattern" target="_blank" rel="external">用MVP架构开发Android应用](http://www.kymjs.com/code/2015/11/09/01)hub案例</a></p>
<p>##参考资料<br><a href="https://segmentfault.com/a/1190000003927200" target="_blank" rel="external">Android MVP模式 简单易懂的介绍方式</a><br><a href="http://www.kymjs.com/code/2015/11/09/01" target="_blank" rel="external">用MVP架构开发Android应用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android网络请求]]></title>
      <url>http://yoursite.com/2016/06/06/Android%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<blockquote>
<p>安卓开发中网络请求是无法避免。不管你是加载图片，请求API数据还是从因特网上获得一个字节，你都是在使用网络。</p>
</blockquote>
<a id="more"></a>
<h2 id="HttpClient-与-HttpUrlConnection"><a href="#HttpClient-与-HttpUrlConnection" class="headerlink" title="HttpClient 与 HttpUrlConnection"></a>HttpClient 与 HttpUrlConnection</h2><ul>
<li><p>Android系统提供了两种HTTP通信类，HttpURLConnection和HttpClient。</p>
</li>
<li><p>HttpClient是apache的开源实现，HttpUrlConnection是安卓标准实现，安卓SDK虽然集成了HttpClient，但官方支持的却是HttpUrlConnection；</p>
</li>
<li><p>HttpUrlConnection直接支持GZIP压缩；HttpClient也支持，但要自己写代码处理；我们之前测试HttpUrlConnection的GZIP压缩在传大文件分包trunk时有问题，只适合小文件，不过这个BUG后来官方说已经修复了；</p>
</li>
<li><p>HttpUrlConnection直接支持系统级连接池，即打开的连接不会直接关闭，在一段时间内所有程序可共用；HttpClient当然也能做到，但毕竟不如官方直接系统底层支持好；</p>
</li>
<li><p>HttpUrlConnection直接在系统层面做了缓存策略处理，加快重复请求的速度。</p>
</li>
</ul>
<p>HttpUrlConnection网络请求的固定格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    private ImageView imageView;</span><br><span class="line"></span><br><span class="line">    //创建一个 Handler 对象，用户接收子线程发送的消息，然后更新 UI</span><br><span class="line">    private Handler handler = new Handler()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            super.handleMessage(msg);</span><br><span class="line">            //将数据强转转化为 Bitmap,然后显示在 ImageView 控件中</span><br><span class="line">            imageView.setImageBitmap((Bitmap) msg.obj);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        imageView = (ImageView)findViewById(R.id.iv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void getImage(View view) &#123;</span><br><span class="line">        //开启一个子线程 处理网络请求</span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    //从页面获取 URL 地址</span><br><span class="line">                    EditText editText = (EditText)findViewById(R.id.et);</span><br><span class="line">                    String path = editText.getText().toString();</span><br><span class="line">                    //调用Android API 中的 TextUtils 工具类判断路径是否为空</span><br><span class="line">                    if (TextUtils.isEmpty(path)) &#123;</span><br><span class="line">                        Looper.prepare();</span><br><span class="line">                        Toast.makeText(MainActivity.this, &quot;请输入URL&quot;, 0).show();</span><br><span class="line">                        Looper.loop();</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    //获取网络请求地址</span><br><span class="line">                    URL url = new URL(path);</span><br><span class="line">                    //网络请求的基本步骤</span><br><span class="line">                    //获取 HttpURLConnection 链接对象</span><br><span class="line">                    HttpURLConnection connection =(HttpURLConnection)url.openConnection();</span><br><span class="line">                    connection.setRequestMethod(&quot;GET&quot;);//设置请求方法为 GET 方式</span><br><span class="line">                    connection.setConnectTimeout(50000);//设置链接超时时间</span><br><span class="line">                    connection.setReadTimeout(50000);//设置输入流读取超时时间</span><br><span class="line">                    connection.connect();//打开链接，发送请求</span><br><span class="line">                    //判断返回的状态码</span><br><span class="line">                    if(connection.getResponseCode()==200)&#123;</span><br><span class="line">                        //获取输入流对象</span><br><span class="line">                        InputStream inputStream = connection.getInputStream();</span><br><span class="line">                        //调用 Android API 提供的 BitmapFactory 工具类将字节流转化为位图</span><br><span class="line">                        Bitmap bitmap = BitmapFactory.decodeStream(inputStream);</span><br><span class="line">                        Message message = new Message();//创建一个新的消息</span><br><span class="line">                        message.obj = bitmap;//将数据绑定消息</span><br><span class="line">                        handler.sendMessage(message);//调用 handler 发送消息给主线程</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="okhttp"><a href="#okhttp" class="headerlink" title="okhttp"></a>okhttp</h2><p><a href="http://blog.csdn.net/lmj623565791/article/details/47911083" target="_blank" rel="external">Android OkHttp完全解析 是时候来了解OkHttp了</a></p>
<p>OkHttp是一个相对成熟的解决方案，据说Android4.4的源码中可以看到HttpURLConnection已经替换成OkHttp实现了。所以我们更有理由相信OkHttp的强大。</p>
<ul>
<li>使用范围</li>
</ul>
<p>OkHttp支持Android 2.3及其以上版本。</p>
<p>对于Java, JDK1.7以上。</p>
<h4 id="Http-Get"><a href="#Http-Get" class="headerlink" title="Http Get"></a>Http Get</h4><p>对了网络加载库，那么最常见的肯定就是http get请求了，比如获取一个网页的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//创建okHttpClient对象</span><br><span class="line"></span><br><span class="line">OkHttpClient mOkHttpClient = new OkHttpClient();</span><br><span class="line"></span><br><span class="line">//创建一个Request</span><br><span class="line"></span><br><span class="line">final Request request = new Request.Builder().url(&quot;https://github.com/hongyangAndroid&quot;).build();</span><br><span class="line"></span><br><span class="line">    //new call</span><br><span class="line"></span><br><span class="line">    Call call = mOkHttpClient.newCall(request);</span><br><span class="line"></span><br><span class="line">    //请求加入调度</span><br><span class="line"></span><br><span class="line">    call.enqueue(new Callback()&#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line"></span><br><span class="line">        public void onFailure(Request request, IOException e)&#123;&#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line"></span><br><span class="line">        public void onResponse(final Response response) throws IOException&#123;</span><br><span class="line"></span><br><span class="line">        //String htmlStr =  response.body().string();&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>看到这，你会发现，整体的写法还是比较长的，所以封装肯定是要做的，不然每个请求这么写，得累死。</p>
<ul>
<li>以上就是发送一个get请求的步骤，首先构造一个Request对象，参数最起码有个url，当然你可以通过Request.Builder设置更多的参数比如：header、method等。</li>
</ul>
<ul>
<li>然后通过request的对象去构造得到一个Call对象，类似于将你的请求封装成了任务，既然是任务，就会有execute()和cancel()等方法。</li>
</ul>
<ul>
<li>最后，我们希望以异步的方式去执行请求，所以我们调用的是call.enqueue，将call加入调度队列，然后等待任务执行完成，我们在Callback中即可得到结果。</li>
</ul>
<ul>
<li>onResponse回调的参数是response，一般情况下，比如我们希望获得返回的字符串，可以通过response.body().string()获取；如果希望获得返回的二进制字节数组，则调用response.body().bytes()；如果你想拿到返回的inputStream，则调用response.body().byteStream()</li>
</ul>
<p>看到这，你可能会奇怪，竟然还能拿到返回的inputStream，看到这个最起码能意识到一点，这里支持大文件下载，有inputStream我们就可以通过IO的方式写文件。不过也说明一个问题，这个onResponse执行的线程并不是UI线程。的确是的，如果你希望操作控件，还是需要使用handler等，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Override</span><br><span class="line"></span><br><span class="line">public void onResponse(final Response response) throws IOException&#123;</span><br><span class="line"></span><br><span class="line">      final String res = response.body().string();</span><br><span class="line"></span><br><span class="line">      runOnUiThread(new Runnable()&#123;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line"></span><br><span class="line">          public void run()&#123;</span><br><span class="line"></span><br><span class="line">            mTv.setText(res);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>我们这里是异步的方式去执行，当然也支持阻塞的方式，上面我们也说了Call有一个execute()方法，你也可以直接调用call.execute()通过返回一个Response。</li>
</ul>
<h4 id="Http-Post-携带参数"><a href="#Http-Post-携带参数" class="headerlink" title="Http Post 携带参数"></a>Http Post 携带参数</h4><p>看来上面的简单的get请求，基本上整个的用法也就掌握了，比如post携带参数，也仅仅是Request的构造的不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Request request = buildMultipartFormRequest(url, new File[]&#123;file&#125;, new String[]&#123;fileKey&#125;, null);</span><br><span class="line"></span><br><span class="line">FormEncodingBuilder builder = new FormEncodingBuilder();</span><br><span class="line"></span><br><span class="line">builder.add(&quot;username&quot;,&quot;张鸿洋&quot;);</span><br><span class="line"></span><br><span class="line">Request request = new Request.Builder().url(url).post(builder.build()).build();</span><br><span class="line"></span><br><span class="line">mOkHttpClient.newCall(request).enqueue(new Callback()&#123;...&#125;);</span><br></pre></td></tr></table></figure>
<p>大家都清楚，post的时候，参数是包含在请求体中的；所以我们通过FormEncodingBuilder。添加多个String键值对，然后去构造RequestBody，最后完成我们Request的构造。</p>
<h4 id="基于Http的文件上传"><a href="#基于Http的文件上传" class="headerlink" title="基于Http的文件上传"></a>基于Http的文件上传</h4><p>接下来我们在介绍一个可以构造RequestBody的Builder，叫做MultipartBuilder。当我们需要做类似于表单上传的时候，就可以使用它来构造我们的requestBody。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">File file = new File(Environment.getExternalStorageDirectory(), &quot;balabala.mp4&quot;);</span><br><span class="line"></span><br><span class="line">RequestBody fileBody = RequestBody.create(MediaType.parse(&quot;application/octet-stream&quot;), file);</span><br><span class="line"></span><br><span class="line">RequestBody requestBody = new MultipartBuilder()</span><br><span class="line"></span><br><span class="line">	.type(MultipartBuilder.FORM)</span><br><span class="line"></span><br><span class="line">    .addPart(Headers.of(</span><br><span class="line"></span><br><span class="line">    	&quot;Content-Disposition&quot;,</span><br><span class="line"></span><br><span class="line">    	&quot;form-data; name=\&quot;username\&quot;&quot;),</span><br><span class="line"></span><br><span class="line">        RequestBody.create(null, &quot;张鸿洋&quot;))</span><br><span class="line"></span><br><span class="line">	.addPart(Headers.of(</span><br><span class="line"></span><br><span class="line">         &quot;Content-Disposition&quot;,</span><br><span class="line"></span><br><span class="line">         &quot;form-data; name=\&quot;mFile\&quot;;</span><br><span class="line"></span><br><span class="line">         filename=\&quot;wjd.mp4\&quot;&quot;), fileBody)</span><br><span class="line"></span><br><span class="line">	.build();</span><br><span class="line"></span><br><span class="line">Request request = new Request.Builder()</span><br><span class="line"></span><br><span class="line">    .url(&quot;http://192.168.1.103:8080/okHttpServer/fileUpload&quot;)</span><br><span class="line"></span><br><span class="line">    .post(requestBody)</span><br><span class="line"></span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">Call call = mOkHttpClient.newCall(request);</span><br><span class="line"></span><br><span class="line">call.enqueue(new Callback()&#123;...&#125;);</span><br></pre></td></tr></table></figure>
<p>##开源框架</p>
<p><a href="http://www.jianshu.com/p/f3227c7008d4" target="_blank" rel="external">这么多开源框架，该用哪个好？</a></p>
<h4 id="Volley"><a href="#Volley" class="headerlink" title="Volley"></a>Volley</h4><ul>
<li><p><a href="http://bxbxbai.github.io/2014/09/14/android-working-with-volley" target="_blank" rel="external">Android库Volley的使用介绍</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/17482095" target="_blank" rel="external">Android Volley完全解析(一)，初识Volley的基本用法</a></p>
</li>
<li><p><a href="http://blog.csdn.net/guolin_blog/article/details/17482165" target="_blank" rel="external"> Android Volley完全解析(二)，使用Volley加载网络图片</a></p>
</li>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0720/3209.html" target="_blank" rel="external">android网络操作I： OkHttp, Volley以及Gson</a></p>
</li>
</ul>
<h4 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h4><ul>
<li><p><a href="https://realm.io/cn/news/droidcon-jake-wharton-simple-http-retrofit-2/" target="_blank" rel="external">用 Retrofit 2 简化 HTTP 请求</a></p>
</li>
<li><p><a href="http://www.tuicool.com/articles/NnuIva" target="_blank" rel="external">Retrofit – Java(Android) 的REST 接口封装类库</a></p>
</li>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0915/3460.html" target="_blank" rel="external">Retrofit 2.0：有史以来最大的改进</a></p>
</li>
<li><p><a href="http://www.stay4it.com/course/22" target="_blank" rel="external">Retrofit分析-漂亮的解耦套路(视频版)</a></p>
</li>
</ul>
<h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><ul>
<li><p>网络层： Retrofit或者Volley＋OkHttp，async-http-lib尽量就别用了，比较老。</p>
</li>
<li><p>数据库： GreenDao, Ormlite或者Realm，要加密的话用SqlCipher</p>
</li>
<li><p>图片缓存： Fresco， glide，如果集成的效果不理想，多看看配置参数是否正确</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个优秀的Android项目]]></title>
      <url>http://yoursite.com/2016/06/05/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BC%98%E7%A7%80%E7%9A%84Android%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>很多时候，尤其是经验不足开发者，通常会不重视项目搭建前的准备工作，随着项目越来越大，我们会碰到很多需要修改前期代码，甚至整个架构，这给我们带来了很大的不便。本文主要价绍一些项目开发前的准备工作。</p>
</blockquote>
<a id="more"></a>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>MVP是不可回避的，Android本身也遵循MVP结构，这里我想谈谈我在开发过程中常用的结构。</p>
<ul>
<li>base —- 自定义的父类，如BaseActivity, 自定义接口，BaseApplication等。</li>
<li>global —- 全局字段相关的类GlobalConstants，格式转化FormFactory</li>
<li>date —- 数据请求</li>
<li>utils —-工具类集合</li>
<li>widgets —- 各个可复用View集合</li>
</ul>
<p>你会发现没有UI，我一般是将UI根据功能模块划分例如用户模块</p>
<ul>
<li>Account<br>&emsp;activity<br>&emsp;fragment<br>&emsp;…</li>
</ul>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><ul>
<li>先在color.xml中写好需要的颜色：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;color name=&quot;Orange&quot;&gt;#ff5722&lt;/color&gt;</span><br><span class="line">    &lt;color name=&quot;DeepPurple&quot;&gt;#673AB7&lt;/color&gt;</span><br><span class="line">    &lt;color name=&quot;DeepPurple900&quot;&gt;#311B92&lt;/color&gt;</span><br><span class="line">    &lt;color name=&quot;White&quot;&gt;#fff&lt;/color&gt;</span><br><span class="line">    &lt;color name=&quot;Gray&quot;&gt;#888888&lt;/color&gt;</span><br><span class="line">    &lt;color name=&quot;Gray100&quot;&gt;#dddddd&lt;/color&gt;</span><br><span class="line">    &lt;color name=&quot;Gray600&quot;&gt;#999999&lt;/color&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注意color.xml是配色表。应该是描述颜色而不是对字体颜色，背景颜色等的定义。这样能防止相近的颜色重复定义。而导致界面颜色不统一。</p>
<ul>
<li>在style.xml里定义主题：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;AppTheme.Base&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class="line">    &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/DeepPurple&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/DeepPurple900&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorAccent&quot;&gt;@color/Orange&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>在res目录下，创建一个values-v21目录，再创建一个style.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;AppTheme&quot; parent=&quot;AppTheme.Base&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:windowDrawsSystemBarBackgrounds&quot;&gt;true&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:statusBarColor&quot;&gt;?colorPrimaryDark&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="依赖库与SDK"><a href="#依赖库与SDK" class="headerlink" title="依赖库与SDK"></a>依赖库与SDK</h2><ul>
<li>android-async-http —- 网络请求库</li>
<li>Android-Universal-Image-Loader 异步图片加载库</li>
<li>Volley —- 2013年Google I/O大会上推出了一个新的网络通信框架(上面两个综合体)</li>
<li><a href="https://github.com/Jude95/RollViewPager" target="_blank" rel="external">RollViewPager</a>—-自动轮播使用方便的ViewPager</li>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">butterknife</a>—-View注解库和配套插件<a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">android-butterknife-zelezny</a></li>
<li>Bmob —- 第三方后台，极大的提升了开发效率。</li>
<li>Mob —- 第三方短信</li>
<li>友盟 —- 数据统计,推送，意见反馈，自动更新，第三方分享及登录,社区</li>
<li>科大讯飞 —- 语音的领导者</li>
</ul>
<h2 id="制定开发规范"><a href="#制定开发规范" class="headerlink" title="制定开发规范"></a>制定开发规范</h2><p>所有Activity继承BaseActivity<br>所有包含Fragment的Activity集成BaseFragmentActivity，BaseFragmentActivity也是集成aseActivity<br>所有Fragment继承BaseFragment<br>这样利于生命周期管理。也可以方便的全局修改。</p>
<p>全局变量命名:以m开头。例mAdapter使用时按一个m全都出来了</p>
<p>drawable文件下命名<br>selector_bg_1<br>shape_bg_corner_1</p>
<p>id命名，然后用butterknife的插件生成变量会自动将下划线变成驼峰命名<br>btn_send<br>tv_name<br>list_persons<br>et_password</p>
<p>layout布局文件命名<br>view_xxx  自定义布局<br>activity_xxx<br>include_xxx</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>这几篇文章在我的学习过程中提供了很大帮助<br><a href="http://www.jianshu.com/p/d9e4ddd1c530" target="_blank" rel="external">一个优秀的Android应用从建项目开始</a><br><a href="http://android.jobbole.com/82375/" target="_blank" rel="external">从零开始搭建架构实施Android项目</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android自定义组合控件]]></title>
      <url>http://yoursite.com/2016/06/05/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E5%90%88%E6%8E%A7%E4%BB%B6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>项目开发中，通过会遇到很多控件复用的情况，如果每次都重写一遍显然是不理智的，这样不仅造成代码冗余，而且修改起来也很麻烦</p>
</blockquote>
<a id="more"></a>
<p>先上效果图<br>注意第一行的变换，<br><img src="/uploads/zdizhkj2.jpg" width="180" height="320" alt="点击第一行前"><br>当点击第一行时<br><img src="/uploads/zdizhkj1.jpg" width="180" height="320" alt="点击第一行后"></p>
<h4 id="定义一个XML布局文件"><a href="#定义一个XML布局文件" class="headerlink" title="定义一个XML布局文件"></a>定义一个XML布局文件</h4><p>view_load_date.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id=&quot;@+id/rl_content&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;50dp&quot;</span><br><span class="line">        android:background=&quot;@color/white&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id=&quot;@+id/et_title&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_centerVertical=&quot;true&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;15dp&quot;</span><br><span class="line">            android:background=&quot;@color/white&quot;</span><br><span class="line">            android:textSize=&quot;18sp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/tv_title&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_alignLeft=&quot;@id/et_title&quot;</span><br><span class="line">            android:layout_alignParentBottom=&quot;true&quot;</span><br><span class="line">            android:clickable=&quot;false&quot;</span><br><span class="line">            android:focusable=&quot;false&quot;</span><br><span class="line">            android:textSize=&quot;10sp&quot;</span><br><span class="line">            android:visibility=&quot;gone&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;View</span><br><span class="line">            android:id=&quot;@+id/v_arrow&quot;</span><br><span class="line">            android:layout_width=&quot;7dp&quot;</span><br><span class="line">            android:layout_height=&quot;15dp&quot;</span><br><span class="line">            android:layout_alignParentRight=&quot;true&quot;</span><br><span class="line">            android:layout_centerVertical=&quot;true&quot;</span><br><span class="line">            android:layout_marginRight=&quot;20dp&quot;</span><br><span class="line">            android:background=&quot;@mipmap/right_arrow&quot;</span><br><span class="line">            android:clickable=&quot;false&quot;</span><br><span class="line">            android:focusable=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="在src-values-attrs-xml中定义属性"><a href="#在src-values-attrs-xml中定义属性" class="headerlink" title="在src/values/attrs.xml中定义属性"></a>在src/values/attrs.xml中定义属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!--自定义--&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;!--必须是declare-styleable--&gt;</span><br><span class="line">    &lt;declare-styleable name=&quot;xgg_attr&quot;&gt;</span><br><span class="line">        &lt;attr name=&quot;mTopHint&quot; format=&quot;string&quot; /&gt;</span><br><span class="line">        &lt;attr name=&quot;mBottomHint&quot; format=&quot;string&quot; /&gt;</span><br><span class="line">        &lt;attr name=&quot;mTopText&quot; format=&quot;string&quot; /&gt;</span><br><span class="line">        &lt;attr name=&quot;mColorText&quot; format=&quot;color&quot; /&gt;</span><br><span class="line">        &lt;attr name=&quot;mColorHint&quot; format=&quot;color&quot; /&gt;</span><br><span class="line">        &lt;attr name=&quot;mShowRight&quot; format=&quot;boolean&quot; /&gt;</span><br><span class="line">        &lt;attr name=&quot;android:inputType&quot; /&gt;</span><br><span class="line">    &lt;/declare-styleable&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>
<h4 id="自定义一个view继承自你需要的布局"><a href="#自定义一个view继承自你需要的布局" class="headerlink" title="自定义一个view继承自你需要的布局"></a>自定义一个view继承自你需要的布局</h4><p>根据需求自定义一些API方法<br>MyEditText.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">public class MyEditText extends RelativeLayout &#123;</span><br><span class="line"></span><br><span class="line">    public EditText etTitle;</span><br><span class="line">    TextView tvTitle;</span><br><span class="line"></span><br><span class="line">    private String mTopHint;//正文(顶部)提示语</span><br><span class="line">    private String mBottomHint;//底部提示语</span><br><span class="line"></span><br><span class="line">    public String getmTopText() &#123;</span><br><span class="line">        return etTitle.getText().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setmTopText(String mTopText) &#123;</span><br><span class="line">        etTitle.setText(mTopText);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String mTopText;//文字</span><br><span class="line">    private int mColorText;//Text文字颜色</span><br><span class="line">    private int mColorHint;//Hint文字颜色</span><br><span class="line">    private Boolean mShowRight;//是否显示向右箭头</span><br><span class="line">    private int inputType;</span><br><span class="line">    private View vArrow;//箭头</span><br><span class="line"></span><br><span class="line">    public MyEditText(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyEditText(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">        initAttrs(context, attrs);</span><br><span class="line">        initDate();</span><br><span class="line">        initListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MyEditText(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">        init(context);</span><br><span class="line">        initAttrs(context, attrs);</span><br><span class="line">        initDate();</span><br><span class="line">        initListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void init(Context context) &#123;</span><br><span class="line">        //加载视图的布局</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.view_my_edittext, this);</span><br><span class="line">        etTitle = (EditText) findViewById(R.id.et_title);</span><br><span class="line">        tvTitle = (TextView) findViewById(R.id.tv_title);</span><br><span class="line">        vArrow = findViewById(R.id.v_arrow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initAttrs(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        //加载自定义的属性</span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.xgg_attr);</span><br><span class="line">        mTopHint = a.getString(R.styleable.xgg_attr_mTopHint);</span><br><span class="line">        mTopText = a.getString(R.styleable.xgg_attr_mTopText);</span><br><span class="line">        mBottomHint = a.getString(R.styleable.xgg_attr_mBottomHint);</span><br><span class="line">        mColorText = a.getColor(R.styleable.xgg_attr_mColorText, 0);</span><br><span class="line">        mColorHint = a.getColor(R.styleable.xgg_attr_mColorHint, 0);</span><br><span class="line">        mShowRight = a.getBoolean(R.styleable.xgg_attr_mShowRight, true);</span><br><span class="line">        //加载系统已经定义的属性</span><br><span class="line">        inputType = a.getInt(R.styleable.xgg_attr_android_inputType, InputType.TYPE_TEXT_VARIATION_PASSWORD);</span><br><span class="line">        //回收资源，这一句必须调用</span><br><span class="line">        a.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initDate() &#123;</span><br><span class="line">        etTitle.setTextColor(mColorText);</span><br><span class="line">        etTitle.setInputType(inputType);</span><br><span class="line">        tvTitle.setText(mBottomHint);</span><br><span class="line">        tvTitle.setTextColor(mColorHint);</span><br><span class="line">        if (!mShowRight) &#123;</span><br><span class="line">            etTitle.setText(mTopText);</span><br><span class="line">            etTitle.setFocusable(false);</span><br><span class="line">            etTitle.setClickable(false);</span><br><span class="line">            tvTitle.setVisibility(View.VISIBLE);</span><br><span class="line">            vArrow.setVisibility(View.GONE);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            etTitle.setHint(mTopHint);</span><br><span class="line">            etTitle.setHintTextColor(mColorHint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	//对点击事件的处理</span><br><span class="line">    private void initListener() &#123;</span><br><span class="line">        etTitle.setOnFocusChangeListener(new OnFocusChangeListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onFocusChange(View v, boolean hasFocus) &#123;</span><br><span class="line">                if (hasFocus) &#123;</span><br><span class="line">                    tvTitle.setVisibility(View.VISIBLE);</span><br><span class="line">                    etTitle.setHintTextColor(getResources().getColor(R.color.transparent));</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (TextUtils.isEmpty(etTitle.getText())) &#123;</span><br><span class="line">                        tvTitle.setVisibility(View.GONE);</span><br><span class="line">                        etTitle.setHintTextColor(mColorHint);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    //对外提供的接口</span><br><span class="line">    public void setTextChangedListener(MyTextChangedListener listener) &#123;</span><br><span class="line">        mListener = listener;</span><br><span class="line">        etTitle.addTextChangedListener(new TextWatcher() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void afterTextChanged(Editable s) &#123;</span><br><span class="line">                mListener.afterTextChanged(MyEditText.this);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MyTextChangedListener mListener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="在布局文件中使用该自定义组合控件"><a href="#在布局文件中使用该自定义组合控件" class="headerlink" title="在布局文件中使用该自定义组合控件"></a>在布局文件中使用该自定义组合控件</h4><p>别忘记声明自定义命名空间<br>xmlns:shun=”<a href="http://schemas.android.com/apk/res/包名" target="_blank" rel="external">http://schemas.android.com/apk/res/包名</a>“<br>或者<br>xmlns:shun=”<a href="http://schemas.android.com/apk/res-auto" target="_blank" rel="external">http://schemas.android.com/apk/res-auto</a>“</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:xgg=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:background=&quot;@color/bg&quot;</span><br><span class="line">    android:focusable=&quot;true&quot;</span><br><span class="line">    android:focusableInTouchMode=&quot;true&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.xgg.xiangguagua.widget.MyEditText</span><br><span class="line">        android:id=&quot;@+id/met_title&quot;</span><br><span class="line">        style=&quot;@style/release_met&quot;</span><br><span class="line">        xgg:mBottomHint=&quot;商品标题&quot;</span><br><span class="line">        xgg:mColorHint=&quot;@color/text_2&quot;</span><br><span class="line">        xgg:mColorText=&quot;@color/text_1&quot;</span><br><span class="line">        xgg:mTopHint=&quot;请输入活动标题&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo使用心得]]></title>
      <url>http://yoursite.com/2016/06/02/Hexo%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这篇文章主要是总结自己在使用hexo创建博客时的一些使用心得。</p>
</blockquote>
<a id="more"></a>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><ul>
<li><p>创建文章<br><code>$ hexo n &quot;Hexo使用心得&quot;</code><br>文章子在根节点下\source_posts下,且文件名是“Hexo使用心得”<br><img src="/uploads/hexo_syxd_1.png" alt=""></p>
</li>
<li><p>创建页面<br><code>$ hexo n page &quot;about&quot;</code><br>新页面在根节点下\source\新页面下，且文件名是“index”,<br><img src="/uploads/hexo_syxd_3.png" alt=""></p>
</li>
<li><p>存放图片<br>放在主题下的sources下<br><img src="/uploads/hexo_syxd_2.png" alt=""><br>这里的uploads文件夹是自己创建的，方便统一管理图片</p>
</li>
<li><p>使用图片<br>/uploads/图片名 即可</p>
</li>
</ul>
<ul>
<li><p>为文章如何设置「阅读全文」</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;!-- more --&gt;这种方式也可以让 Hexo 中的插件更好的识别。</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭页面或文章的评论功能<br>在常见页面的是的标签（tags）下添加<br><code>comments: false</code></p>
</li>
</ul>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><ul>
<li><p>常用命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用复合命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g #生成加部署</span><br><span class="line">hexo s -g #预览加部署</span><br></pre></td></tr></table></figure>
</li>
<li><p>简写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Hexo安装过程"><a href="#Hexo安装过程" class="headerlink" title="Hexo安装过程"></a>Hexo安装过程</h2><ul>
<li><p>1 打开git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>2 部署Hexo<br>在我的电脑中建立一个名字叫「Hexo」的文件夹，然后在此文件夹中右键打开Git Bash。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
</li>
<li><p>3 Hexo随后会自动在目标文件夹建立网站所需要的所有文件。现在我们已经搭建起本地的hexo博客了，执行以下命令(在Hexo项目的根目录下)，然后到浏览器输入localhost:4000看看。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
</li>
<li><p>4 更新主题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/cnfeat/cnfeat.git themes/jacman</span><br></pre></td></tr></table></figure>
</li>
<li><p>5 启用cnfeat的主题<br>修改Hexo目录下的config.yml配置文件中的theme属性，将其设置为jacman。同时请设置stylus属性中的compress值为true。</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>有关头像陪著，等等其他的问题请参考下面的资料<br><a href="http://theme-next.iissnan.com/getting-started.html#avatar-setting" target="_blank" rel="external">Next主题使用说明书</a><br><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客–简明Github Pages与Hexo教程</a></p>
]]></content>
    </entry>
    
  
  
</search>
